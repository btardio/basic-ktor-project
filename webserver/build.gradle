/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'buildlogic.kotlin-application-conventions'
}

tasks {
    jar {
        manifest {
            attributes("Main-Class": "kmeans.webserver.AppKt")
        }

        duplicatesStrategy = DuplicatesStrategy.INCLUDE

        from sourceSets.main.output

        dependsOn configurations.runtimeClasspath
        from {
            configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }


    }
}
application {
    // Define the main class for the application.
    mainClass = 'kmeans.webserver.App'
}

dependencies {
    implementation 'org.apache.commons:commons-text'
    implementation(project(":env-support"))
    implementation(project(":solrSupport"))
    implementation project(path: ':rabbitSupport')
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
    implementation("ch.qos.logback:logback-classic:1.4.14")
    implementation("com.zaxxer:HikariCP:5.1.0")
    implementation("com.rabbitmq:amqp-client:5.20.0")
    implementation("io.ktor:ktor-server-core:2.3.8")
    implementation("io.ktor:ktor-server-netty:2.3.8")
    implementation("io.prometheus:prometheus-metrics-core:1.0.0")
    implementation("io.prometheus:prometheus-metrics-instrumentation-jvm:1.0.0")
    implementation("io.prometheus:prometheus-metrics-exporter-httpserver:1.0.0")
    implementation("org.apache.solr:solr-solrj:8.4.1")
    implementation("io.ktor:ktor-serialization-kotlinx-json:2.3.8")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.16.1")
    implementation("org.projectlombok:lombok:1.18.30")


}


//
//plugins {
//    id 'kmeans.kotlin-application-conventions'
//    id 'org.jetbrains.kotlin.jvm' version '1.9.10'
//    id 'application'
//}
//
//dependencies {
//    implementation 'org.apache.commons:commons-text'
//}
//
//application {
//    // Define the main class for the application.
//    mainClass = 'kmeans.webserver.App'
//}
//
//kotlin {
//    jvmToolchain(17)
//}
//
////tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
////    sourceCompatibility = JavaVersion.VERSION_17
////    targetCompatibility = JavaVersion.VERSION_17
////
////    kotlinOptions {
////        jvmTarget = '17'
////        apiVersion = '1.1'
////        languageVersion = '1.1'
////    }
////}
////
////java {
////    toolchain {
////        languageVersion.set(JavaLanguageVersion.of(17))
////    }
////}
////
////
////kotlin {
////    jvmToolchain {
////        languageVersion.set(JavaLanguageVersion.of(17))
////    }
////    // Or shorter:
////    jvmToolchain(17)
////    // For example:
////    jvmToolchain(17)
////}
////
//tasks {
//    jar {
//        manifest {
//            attributes("Main-Class": "kmeans.webserver.AppKt")
//        }
//
//    }
//}
//
//dependencies {
//
////    implementation(project(":components:serialization-support"))
////    implementation(project(":components:env-support"))
//
//    implementation("com.rabbitmq:amqp-client:5.20.0")
//    implementation project(':env-support')
//    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
////    implementation("com.zaxxer:HikariCP:5.1.0")
//
////    implementation("io.ktor:ktor-client-core:$ktorVersion")
////    implementation("io.ktor:ktor-client-java:$ktorVersion")
////    implementation("io.ktor:ktor-serialization-kotlinx-json:$ktorVersion")
////
////    implementation("org.jetbrains.exposed:exposed-core:$exposedVersion")
////    implementation("org.jetbrains.exposed:exposed-jdbc:$exposedVersion")
////    implementation("com.zaxxer:HikariCP:$hikariVersion")
////    implementation("org.postgresql:postgresql:$postgresVersion")
////
////    implementation("ch.qos.logback:logback-classic:$logbackVersion")
////
////    testImplementation(project(":components:test-support"))
//}
////
////task<JavaExec>("run") {
////    classpath = files(tasks.jar)
////    environment("DATABASE_URL", "jdbc:postgresql://localhost:5555/notification_dev?user=emailverifier&password=emailverifier")
////    environment("RABBIT_URL", "amqp://localhost:5672")
////    environment("FROM_ADDRESS", "dev@initialcapacity.io")
////    environment("SENDGRID_API_KEY", "super-secret")
////    environment("SENDGRID_URL", "http://localhost:9091")
////}
////
////tasks {
////    jar {
////        manifest {
////            attributes("Main-Class" to "io.initialcapacity.emailverifier.webserver.AppKt")
////        }
////
////        duplicatesStrategy = INCLUDE
////
////        from({
////            configurations.runtimeClasspath.get()
////                .filter { it.name.endsWith("jar") }
////                .map {
////                    zipTree(it)
////                }
////        })
////    }
////}
////import org.gradle.api.file.DuplicatesStrategy.INCLUDE
//
////plugins {
////    id("kmeans.common-conventions")
////}
//
////val rabbitVersion: String by project
////val logbackVersion: String by project
////val ktorVersion: String by project
////val exposedVersion: String by project
////val hikariVersion: String by project
////val postgresVersion: String by project
