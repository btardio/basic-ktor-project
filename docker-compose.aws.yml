# docker-compose -f /application/docker-compose.yml --env-file /.env down && docker-compose -f /application/docker-compose.yml --env-file /.env up --detach && docker container logs application-rabbit-1 --follow
services:
  apache:
    image: httpd:2.4
    container_name: httpd
    ports:
      - '8181:80'
    volumes:
      - /application/httpd/htdocsaws:/usr/local/apache2/htdocs
    extra_hosts:
      - "host.docker.internal:host-gateway"
  httpdproxy:
    image: httpd:latest
    ports:
      - "80:80"
    volumes:
      - ./httpd-proxy/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro
    extra_hosts:
      - "host.docker.internal:host-gateway"
  basic-server:
    build:
      context: ./
      no_cache: true
    restart: always
    hostname: webserver
    container_name: kotlin-ktor-server
    ports:
      - ${BASIC_SERVER_PORT_MAP}
      - "65403:65403"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - COLLECTOR_EXCHANGE=collector-exchange
      - COLLECTOR_QUEUE=collector-queue-${HOSTNAME}-a
      - WEBSERVER_EXCHANGE=webserver-exchange
      - WEBSERVER_QUEUE=webserver-queue-${HOSTNAME}-a
      - RABBIT_URL=host.docker.internal
      - PORT=8888
      - APP=webserver/build/libs/webserver.jar
      - AWSHOSTNAME=${HOSTNAME}
      - ZOO_LOCAL=${ZOO_LOCAL}
      - SOLR_CONNECT_IP=${SOLR_CONNECT_IP}
      - COORDINATES_AFTER_WEBSERVER_SHARDS=${COORDINATES_AFTER_WEBSERVER_SHARDS}
      - COORDINATES_AFTER_WEBSERVER_REPLICAS=${COORDINATES_AFTER_WEBSERVER_REPLICAS}
      - COORDINATES_AFTER_COLLECTOR_SHARDS=${COORDINATES_AFTER_COLLECTOR_SHARDS}
      - COORDINATES_AFTER_COLLECTOR_REPLICAS=${COORDINATES_AFTER_COLLECTOR_REPLICAS}
      - COORDINATES_AFTER_ANALYZER_SHARDS=${COORDINATES_AFTER_ANALYZER_SHARDS}
      - COORDINATES_AFTER_ANALYZER_REPLICAS=${COORDINATES_AFTER_ANALYZER_REPLICAS}
      - SCHEDULES_SHARDS=${SCHEDULES_SHARDS}
      - SCHEDULES_REPLICAS=${SCHEDULES_REPLICAS}
    depends_on:
      - solr1
  data-analyzer:
    build:
      context: ./
      no_cache: true
    restart: always
    container_name: kotlin-ktor-analyzer
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - ${DATA_ANALYZER_PORT_MAP}
      - "65400:65400"
    environment:
      - WEBSERVER_EXCHANGE=webserver-exchange
      - WEBSERVER_QUEUE=webserver-queue-${HOSTNAME}-b
      - ANALYZER_EXCHANGE=analyzer-exchange
      - ANALYZER_QUEUE=analyzer-queue-${HOSTNAME}-a
      - RABBIT_URL=host.docker.internal
      - PORT=8887
      - APP=analyzer/build/libs/analyzer.jar
      - AWSHOSTNAME=${HOSTNAME}
      - ZOO_LOCAL=${ZOO_LOCAL}
      - SOLR_CONNECT_IP=${SOLR_CONNECT_IP}
      - COORDINATES_AFTER_WEBSERVER_SHARDS=${COORDINATES_AFTER_WEBSERVER_SHARDS}
      - COORDINATES_AFTER_WEBSERVER_REPLICAS=${COORDINATES_AFTER_WEBSERVER_REPLICAS}
      - COORDINATES_AFTER_COLLECTOR_SHARDS=${COORDINATES_AFTER_COLLECTOR_SHARDS}
      - COORDINATES_AFTER_COLLECTOR_REPLICAS=${COORDINATES_AFTER_COLLECTOR_REPLICAS}
      - COORDINATES_AFTER_ANALYZER_SHARDS=${COORDINATES_AFTER_ANALYZER_SHARDS}
      - COORDINATES_AFTER_ANALYZER_REPLICAS=${COORDINATES_AFTER_ANALYZER_REPLICAS}
      - SCHEDULES_SHARDS=${SCHEDULES_SHARDS}
      - SCHEDULES_REPLICAS=${SCHEDULES_REPLICAS}
    depends_on:
      - solr1
  data-collector:
    build:
      context: ./
      no_cache: true
    restart: always
    container_name: kotlin-ktor-collector
    ports:
      - ${DATA_COLLECTOR_PORT_MAP}
      - "65409:65409"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - ANALYZER_EXCHANGE=analyzer-exchange
      - ANALYZER_QUEUE=analyzer-queue-${HOSTNAME}-b
      - COLLECTOR_EXCHANGE=collector-exchange
      - COLLECTOR_QUEUE=collector-queue-${HOSTNAME}-b
      - RABBIT_URL=host.docker.internal
      - PORT=8886
      - APP=collector/build/libs/collector.jar
      - AWSHOSTNAME=${HOSTNAME}
      - ZOO_LOCAL=${ZOO_LOCAL}
      - SOLR_CONNECT_IP=${SOLR_CONNECT_IP}
      - COORDINATES_AFTER_WEBSERVER_SHARDS=${COORDINATES_AFTER_WEBSERVER_SHARDS}
      - COORDINATES_AFTER_WEBSERVER_REPLICAS=${COORDINATES_AFTER_WEBSERVER_REPLICAS}
      - COORDINATES_AFTER_COLLECTOR_SHARDS=${COORDINATES_AFTER_COLLECTOR_SHARDS}
      - COORDINATES_AFTER_COLLECTOR_REPLICAS=${COORDINATES_AFTER_COLLECTOR_REPLICAS}
      - COORDINATES_AFTER_ANALYZER_SHARDS=${COORDINATES_AFTER_ANALYZER_SHARDS}
      - COORDINATES_AFTER_ANALYZER_REPLICAS=${COORDINATES_AFTER_ANALYZER_REPLICAS}
      - SCHEDULES_SHARDS=${SCHEDULES_SHARDS}
      - SCHEDULES_REPLICAS=${SCHEDULES_REPLICAS}
    depends_on:
      - solr1
  rabbit:
    network_mode: "host"
    image: rabbitmq:3.12-alpine
    restart: always
    environment:
      - RABBITMQ_NODENAME=${RABBITMQ_NODENAME}
      - CLUSTERED="${RABBIT_CLUSTERED}"
      - RABBITMQ_ERLANG_COOKIE=11111111111111111
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/conf.d/90-rabbitmq.conf
    extra_hosts:
      - "${RABBIT_HOSTA}"
      - "${RABBIT_HOSTB}"
      - "${RABBIT_HOSTC}"
      - "${RABBIT_HOSTD}"
      - "${RABBIT_HOSTE}"
      - "host.docker.internal:host-gateway"
    command: >
      sh -c "rabbitmq-plugins enable --offline rabbitmq_management &&
             rabbitmq-plugins enable rabbitmq_consistent_hash_exchange &&
             rm -f /etc/rabbitmq/conf.d/20-management_agent.disable_metrics_collector.conf &&
             cp /plugins/rabbitmq_management-*/priv/www/cli/rabbitmqadmin /usr/local/bin/rabbitmqadmin &&
             chmod +x /usr/local/bin/rabbitmqadmin &&
             apk add --no-cache python3 &&
             rabbitmq-server"
    volumes:
      - /home/ec2-user/90-rabbitmq.conf:/etc/rabbitmq/conf.d/90-rabbitmq.conf

  solr1:
    image: solr:8.7.0
    network_mode: "host"
    restart: always
    container_name: solr1
    environment:
      - ZK_HOST=${SOLR_ZK_HOST}
      - SOLR_HOST=${IPADDRA}
      - SOLR_PORT=8981
    depends_on:
      - zooAws

  solr2:
    image: solr:8.7.0
    network_mode: "host"
    restart: always
    container_name: solr2
    environment:
      - ZK_HOST=${SOLR_ZK_HOST}
      - SOLR_HOST=${IPADDRB}
      - SOLR_PORT=8982
    depends_on:
      - zooAws

  solr3:
    image: solr:8.7.0
    network_mode: "host"
    restart: always
    container_name: solr3
    environment:
      - ZK_HOST=${SOLR_ZK_HOST}
      - SOLR_HOST=${IPADDRC}
      - SOLR_PORT=8983
    depends_on:
      - zooAws

  zooAws:
    image: zookeeper:3.6.2
    network_mode: "host"
    container_name: zoo1
    restart: always
    hostname: zoo1
    environment:
      ZOO_MY_ID: ${ZOO1_ID}
      ZOO_SERVERS: ${ZOO_SERVERS}
      ZOO_4LW_COMMANDS_WHITELIST: mntr, conf, ruok
      ZOO_CFG_EXTRA: "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider metricsProvider.httpPort=7000 metricsProvider.exportJvmInfo=true"
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - /application/prometheus:/etc/prometheus
      - prom_data:/prometheus
#    networks:
#      - solr
  redis:
    image: redis:7.0
    restart: always
    ports:
      - 6379:6379

  python:
    image: python:3.7-alpine
    restart: always
    network_mode: "host"
    command: >
      sh -c "pip install docker &&
             pip install redis &&
             python3 /restarter/restarter.py
             "
#    environment:
#      - ANALYZER_QUEUE=analyzer-queue-${HOSTNAME}-a
#      - WEBSERVER_QUEUE=webserver-queue-${HOSTNAME}-a
#      - COLLECTOR_QUEUE=collector-queue-${HOSTNAME}-a
#      - ANALYZER_QUEUE=analyzer-queue-${HOSTNAME}-b
#      - WEBSERVER_QUEUE=webserver-queue-${HOSTNAME}-b
#      - COLLECTOR_QUEUE=collector-queue-${HOSTNAME}-b
    volumes:
      - restarter/:/restarter
      - "/var/run/docker.sock:/var/run/docker.sock"
volumes:
  prom_data:
#  zoo2:
#    image: zookeeper:3.6.2
#    container_name: zoo2
#    hostname: zoo2
#    ports:
#      - "${ZOO2_PORTS}"
#      - 7002:7000
#      - "${ZOO2_COMMANDS}"
#      - "${ZOOIPB}:22888-23888:2888-3888"
#    environment:
#      ZOO_MY_ID: ${ZOO2_ID}
#      ZOO_SERVERS: ${ZOO_SERVERS}
#      ZOO_4LW_COMMANDS_WHITELIST: mntr, conf, ruok
#      ZOO_CFG_EXTRA: "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider metricsProvider.httpPort=7000 metricsProvider.exportJvmInfo=true"
##    networks:
##      - solr
#
#  zoo3:
#    image: zookeeper:3.6.2
#    container_name: zoo3
#    hostname: zoo3
#    ports:
#      - "${ZOO3_PORTS}"
#      - 7003:7000
#      - "${ZOO3_COMMANDS}"
#      - "${ZOOIPC}:32888-33888:2888-3888"
#    environment:
#      ZOO_MY_ID: ${ZOO3_ID}
#      ZOO_SERVERS: ${ZOO_SERVERS}
#      ZOO_4LW_COMMANDS_WHITELIST: mntr, conf, ruok
#      ZOO_CFG_EXTRA: "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider metricsProvider.httpPort=7000 metricsProvider.exportJvmInfo=true"
#    networks:
#      - solr
#
#networks:
#  solr: